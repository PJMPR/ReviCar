package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import domain.model.Client;

public class ClientRepository {

	private Connection connection;
	
	private String createTableSql = "CREATE TABLE client("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(20),"
			+ "surname VARCHAR(50)"
			+ ")";
	
	private Statement createTable;
	
	
	private String insertSql = "INSERT INTO client(name,surname) VALUES(?,?)";
	private String deleteSql = "DELETE FROM client WHERE id = ?";
	private String updateSql = "UPDATE client set name=?, surname=? WHERE id=?";
	private String selectByIdSql = "SELECT * FROM client WHERE id=?";
	private String selectAllSql = "SELECT * FROM client";
	
	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement selectById;
	private PreparedStatement selectAll;
	
	public ClientRepository(Connection connection) {
		this.connection = connection;
		
		try {
			createTable = connection.createStatement();
			
			boolean tableExists = false;
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("client")){
					tableExists=true;
					break;
				}
			}
			if(!tableExists)
				createTable.executeUpdate(createTableSql);
			insert = connection.prepareStatement(insertSql);
			delete = connection.prepareStatement(deleteSql);	
			update = connection.prepareStatement(updateSql);
			selectById = connection.prepareStatement(selectByIdSql);
			selectAll = connection.prepareStatement(selectAllSql);
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Client get(int clientId){
		try{
			
			selectById.setInt(1, clientId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Client result = new Client();
				result.setId(clientId);
				result.setName(rs.getString("name"));
				result.setSurname(rs.getString("surname"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}

	public List<Client> getAll(){
		try{
			List<Client> result = new ArrayList<Client>();
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()){
				Client p = new Client();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				result.add(p);
			}
			return result;
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	
	public void delete(Client p){
		try{
			delete.setInt(1, p.getId());
			delete.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public void add(Client p){
		try{
			
			insert.setString(1, p.getName());
			insert.setString(2, p.getSurname());
			insert.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		
	}
	
	public void update(Client p){
		try{
			
			update.setString(1, p.getName());
			update.setString(2, p.getSurname());
			update.setInt(3, p.getId());
			update.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		
	}
	
	
	
	
	
	
	
	
	
	
}
